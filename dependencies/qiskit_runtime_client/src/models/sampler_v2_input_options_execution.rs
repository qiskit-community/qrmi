/*
 * Qiskit Runtime API
 *
 * The Qiskit Runtime API description
 *
 * The version of the OpenAPI document: 0.31.10
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// SamplerV2InputOptionsExecution : Execution options
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SamplerV2InputOptionsExecution {
    /// Whether to reset the qubits to the ground state for each shot
    #[serde(rename = "init_qubits", skip_serializing_if = "Option::is_none")]
    pub init_qubits: Option<bool>,
    /// The delay between a measurement and the subsequent quantum circuit
    #[serde(rename = "rep_delay", skip_serializing_if = "Option::is_none")]
    pub rep_delay: Option<f64>,
    /// How to process and return measurement results
    #[serde(rename = "meas_type", skip_serializing_if = "Option::is_none")]
    pub meas_type: Option<MeasType>,
}

impl SamplerV2InputOptionsExecution {
    /// Execution options
    pub fn new() -> SamplerV2InputOptionsExecution {
        SamplerV2InputOptionsExecution {
            init_qubits: None,
            rep_delay: None,
            meas_type: None,
        }
    }
}
/// How to process and return measurement results
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MeasType {
    #[serde(rename = "classified")]
    Classified,
    #[serde(rename = "kerneled")]
    Kerneled,
    #[serde(rename = "avg_kerneled")]
    AvgKerneled,
}

impl Default for MeasType {
    fn default() -> MeasType {
        Self::Classified
    }
}
