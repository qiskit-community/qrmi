/*
 * Qiskit Runtime API
 *
 * The Qiskit Runtime API description
 *
 * The version of the OpenAPI document: 0.31.10
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetUsage200Response {
    #[serde(rename = "instance_id")]
    pub instance_id: String,
    #[serde(rename = "plan_id")]
    pub plan_id: String,
    #[serde(rename = "usage_period", skip_serializing_if = "Option::is_none")]
    pub usage_period: Option<Box<models::GetUsage200ResponseUsagePeriod>>,
    /// Usage consumed in the current usage period
    #[serde(rename = "usage_consumed_seconds")]
    pub usage_consumed_seconds: f64,
    /// The usage limit in seconds during the usage period
    #[serde(
        rename = "usage_limit_seconds",
        skip_serializing_if = "Option::is_none"
    )]
    pub usage_limit_seconds: Option<f64>,
    /// The seconds that are allocated for the instance during the usage period
    #[serde(
        rename = "usage_allocation_seconds",
        skip_serializing_if = "Option::is_none"
    )]
    pub usage_allocation_seconds: Option<f64>,
    /// true if the usage limit is reached. false if not reached. undefined if usage limits do not apply to this instance.
    #[serde(
        rename = "usage_limit_reached",
        skip_serializing_if = "Option::is_none"
    )]
    pub usage_limit_reached: Option<bool>,
}

impl GetUsage200Response {
    pub fn new(
        instance_id: String,
        plan_id: String,
        usage_consumed_seconds: f64,
    ) -> GetUsage200Response {
        GetUsage200Response {
            instance_id,
            plan_id,
            usage_period: None,
            usage_consumed_seconds,
            usage_limit_seconds: None,
            usage_allocation_seconds: None,
            usage_limit_reached: None,
        }
    }
}
