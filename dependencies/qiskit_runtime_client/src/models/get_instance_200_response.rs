/*
 * Qiskit Runtime API
 *
 * The Qiskit Runtime API description
 *
 * The version of the OpenAPI document: 0.31.10
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// GetInstance200Response : Instance
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetInstance200Response {
    /// List of backend systems or clusters associated with the service instance
    #[serde(rename = "backends", skip_serializing_if = "Option::is_none")]
    pub backends: Option<Vec<String>>,
    /// Represents the instance limits in seconds; will be replaced by instance_limit_seconds
    #[serde(rename = "instance_limit", skip_serializing_if = "Option::is_none")]
    pub instance_limit: Option<f64>,
    /// Specifies the maximum number of resources time that can run on this instance
    #[serde(
        rename = "instance_limit_seconds",
        skip_serializing_if = "Option::is_none"
    )]
    pub instance_limit_seconds: Option<String>,
    /// Identifier for the service plan associated with the instance as defined in Global Catalog
    #[serde(rename = "plan_id", skip_serializing_if = "Option::is_none")]
    pub plan_id: Option<String>,
    /// The maximum sum of allowable usage allocation on the instance.
    #[serde(
        rename = "usage_allocation_seconds",
        skip_serializing_if = "Option::is_none"
    )]
    pub usage_allocation_seconds: Option<String>,
}

impl GetInstance200Response {
    /// Instance
    pub fn new() -> GetInstance200Response {
        GetInstance200Response {
            backends: None,
            instance_limit: None,
            instance_limit_seconds: None,
            plan_id: None,
            usage_allocation_seconds: None,
        }
    }
}
