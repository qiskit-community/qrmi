/*
 * Qiskit Runtime API
 *
 * The Qiskit Runtime API description
 *
 * The version of the OpenAPI document: 0.31.10
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// SamplerV2InputOptionsTwirling : Twirling options
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SamplerV2InputOptionsTwirling {
    /// Whether to apply 2-qubit gate twirling
    #[serde(rename = "enable_gates", skip_serializing_if = "Option::is_none")]
    pub enable_gates: Option<bool>,
    /// Whether to apply measurement twirling
    #[serde(rename = "enable_measure", skip_serializing_if = "Option::is_none")]
    pub enable_measure: Option<bool>,
    #[serde(rename = "num_randomizations", skip_serializing_if = "Option::is_none")]
    pub num_randomizations: Option<Box<models::SamplerV2InputOptionsTwirlingNumRandomizations>>,
    #[serde(
        rename = "shots_per_randomization",
        skip_serializing_if = "Option::is_none"
    )]
    pub shots_per_randomization:
        Option<Box<models::SamplerV2InputOptionsTwirlingShotsPerRandomization>>,
    /// The strategy of twirling qubits in identified layers of 2-qubit twirled gates
    #[serde(rename = "strategy", skip_serializing_if = "Option::is_none")]
    pub strategy: Option<Strategy>,
}

impl SamplerV2InputOptionsTwirling {
    /// Twirling options
    pub fn new() -> SamplerV2InputOptionsTwirling {
        SamplerV2InputOptionsTwirling {
            enable_gates: None,
            enable_measure: None,
            num_randomizations: None,
            shots_per_randomization: None,
            strategy: None,
        }
    }
}
/// The strategy of twirling qubits in identified layers of 2-qubit twirled gates
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Strategy {
    #[serde(rename = "active")]
    Active,
    #[serde(rename = "active-circuit")]
    ActiveCircuit,
    #[serde(rename = "active-accum")]
    ActiveAccum,
    #[serde(rename = "all")]
    All,
}

impl Default for Strategy {
    fn default() -> Strategy {
        Self::Active
    }
}
