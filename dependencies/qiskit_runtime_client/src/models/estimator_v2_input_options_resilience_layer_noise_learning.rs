/*
 * Qiskit Runtime API
 *
 * The Qiskit Runtime API description
 *
 * The version of the OpenAPI document: 0.31.10
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// EstimatorV2InputOptionsResilienceLayerNoiseLearning : Layer noise learning options
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct EstimatorV2InputOptionsResilienceLayerNoiseLearning {
    /// The max number of unique layers to learn
    #[serde(
        rename = "max_layers_to_learn",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub max_layers_to_learn: Option<Option<i32>>,
    /// The total number of shots to use per random learning circuit
    #[serde(
        rename = "shots_per_randomization",
        skip_serializing_if = "Option::is_none"
    )]
    pub shots_per_randomization: Option<i32>,
    /// The number of random circuits to use per learning circuit configuration
    #[serde(rename = "num_randomizations", skip_serializing_if = "Option::is_none")]
    pub num_randomizations: Option<i32>,
    /// A list of integers representing the circuit depths (measured in number of pairs) to use in learning experiments
    #[serde(
        rename = "layer_pair_depths",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub layer_pair_depths: Option<Option<serde_json::Value>>,
}

impl EstimatorV2InputOptionsResilienceLayerNoiseLearning {
    /// Layer noise learning options
    pub fn new() -> EstimatorV2InputOptionsResilienceLayerNoiseLearning {
        EstimatorV2InputOptionsResilienceLayerNoiseLearning {
            max_layers_to_learn: None,
            shots_per_randomization: None,
            num_randomizations: None,
            layer_pair_depths: None,
        }
    }
}
