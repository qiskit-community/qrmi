/*
 * Qiskit Runtime API
 *
 * The Qiskit Runtime API description
 *
 * The version of the OpenAPI document: 0.31.10
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// NoiseLearnerInputOptions : NoiseLearner options
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct NoiseLearnerInputOptions {
    #[serde(rename = "simulator", skip_serializing_if = "Option::is_none")]
    pub simulator: Option<Box<models::SamplerV2InputOptionsSimulator>>,
    /// The max number of unique layers to learn
    #[serde(
        rename = "max_layers_to_learn",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub max_layers_to_learn: Option<Option<i32>>,
    /// The total number of shots to use per random learning circuit
    #[serde(
        rename = "shots_per_randomization",
        skip_serializing_if = "Option::is_none"
    )]
    pub shots_per_randomization: Option<i32>,
    /// The number of random circuits to use per learning circuit configuration
    #[serde(rename = "num_randomizations", skip_serializing_if = "Option::is_none")]
    pub num_randomizations: Option<i32>,
    /// The circuit depths (measured in number of pairs) to use in learning experiments
    #[serde(rename = "layer_pair_depths", skip_serializing_if = "Option::is_none")]
    pub layer_pair_depths: Option<Vec<i32>>,
    /// The strategy of twirling qubits in identified layers of 2-qubit twirled gates
    #[serde(rename = "twirling_strategy", skip_serializing_if = "Option::is_none")]
    pub twirling_strategy: Option<TwirlingStrategy>,
    /// Experimental options.
    #[serde(rename = "experimental", skip_serializing_if = "Option::is_none")]
    pub experimental: Option<serde_json::Value>,
    /// If True, returns a Qiskit-style output, meant to be parsed using the runtime result decoder, or resort to returning pure JSON results (resulting in larger objects)
    #[serde(rename = "support_qiskit", skip_serializing_if = "Option::is_none")]
    pub support_qiskit: Option<bool>,
}

impl NoiseLearnerInputOptions {
    /// NoiseLearner options
    pub fn new() -> NoiseLearnerInputOptions {
        NoiseLearnerInputOptions {
            simulator: None,
            max_layers_to_learn: None,
            shots_per_randomization: None,
            num_randomizations: None,
            layer_pair_depths: None,
            twirling_strategy: None,
            experimental: None,
            support_qiskit: None,
        }
    }
}
/// The strategy of twirling qubits in identified layers of 2-qubit twirled gates
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TwirlingStrategy {
    #[serde(rename = "active")]
    Active,
    #[serde(rename = "active-circuit")]
    ActiveCircuit,
    #[serde(rename = "active-accum")]
    ActiveAccum,
    #[serde(rename = "all")]
    All,
}

impl Default for TwirlingStrategy {
    fn default() -> TwirlingStrategy {
        Self::Active
    }
}
