/*
 * Qiskit Runtime API
 *
 * The Qiskit Runtime API description
 *
 * The version of the OpenAPI document: 0.31.10
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// EstimatorV2InputOptionsDynamicalDecoupling : Suboptions for dynamical decoupling
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct EstimatorV2InputOptionsDynamicalDecoupling {
    /// Whether to enable dynamical decoupling.
    #[serde(rename = "enable", skip_serializing_if = "Option::is_none")]
    pub enable: Option<bool>,
    /// Which dynamical decoupling sequence to use
    #[serde(rename = "sequence_type", skip_serializing_if = "Option::is_none")]
    pub sequence_type: Option<SequenceType>,
    /// Where to put extra timing delays due to rounding issues
    #[serde(
        rename = "extra_slack_distribution",
        skip_serializing_if = "Option::is_none"
    )]
    pub extra_slack_distribution: Option<ExtraSlackDistribution>,
    /// Whether to schedule gates as soon as ('asap') or as late as ('alap') possible
    #[serde(rename = "scheduling_method", skip_serializing_if = "Option::is_none")]
    pub scheduling_method: Option<SchedulingMethod>,
    /// Whether to insert DD on idle periods that immediately follow initialized/reset qubits.
    #[serde(rename = "skip_reset_qubits", skip_serializing_if = "Option::is_none")]
    pub skip_reset_qubits: Option<bool>,
}

impl EstimatorV2InputOptionsDynamicalDecoupling {
    /// Suboptions for dynamical decoupling
    pub fn new() -> EstimatorV2InputOptionsDynamicalDecoupling {
        EstimatorV2InputOptionsDynamicalDecoupling {
            enable: None,
            sequence_type: None,
            extra_slack_distribution: None,
            scheduling_method: None,
            skip_reset_qubits: None,
        }
    }
}
/// Which dynamical decoupling sequence to use
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SequenceType {
    #[serde(rename = "XX")]
    Xx,
    #[serde(rename = "XpXm")]
    XpXm,
    #[serde(rename = "XY4")]
    Xy4,
}

impl Default for SequenceType {
    fn default() -> SequenceType {
        Self::Xx
    }
}
/// Where to put extra timing delays due to rounding issues
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ExtraSlackDistribution {
    #[serde(rename = "middle")]
    Middle,
    #[serde(rename = "edges")]
    Edges,
}

impl Default for ExtraSlackDistribution {
    fn default() -> ExtraSlackDistribution {
        Self::Middle
    }
}
/// Whether to schedule gates as soon as ('asap') or as late as ('alap') possible
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SchedulingMethod {
    #[serde(rename = "alap")]
    Alap,
    #[serde(rename = "asap")]
    Asap,
}

impl Default for SchedulingMethod {
    fn default() -> SchedulingMethod {
        Self::Alap
    }
}
